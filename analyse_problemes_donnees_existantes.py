import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

class AnalyseProblemesDonnees:
    def __init__(self, fichier_donnees):
        self.fichier_donnees = fichier_donnees
        self.data = None
        self.problemes_identifies = []
        
    def charger_donnees(self):
        """Charge et analyse les donn√©es existantes"""
        print(f"üìÇ Chargement des donn√©es: {self.fichier_donnees}")
        
        try:
            self.data = pd.read_csv(self.fichier_donnees)
            print(f"‚úÖ Donn√©es charg√©es: {len(self.data)} enregistrements")
            print(f"üìä Colonnes: {list(self.data.columns)}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement: {e}")
            return False
    
    def identifier_problemes_regions(self):
        """Identifie les probl√®mes avec les r√©gions/pays"""
        print("\nüîç ANALYSE DES PROBL√àMES DE R√âGIONS/PAYS")
        print("=" * 50)
        
        if 'Region' in self.data.columns:
            regions_uniques = self.data['Region'].unique()
            print(f"\nüìã R√©gions identifi√©es dans les donn√©es:")
            for i, region in enumerate(regions_uniques, 1):
                print(f"  {i}. {region}")
            
            # Probl√®mes identifi√©s
            problemes = []
            
            # V√©rifier si ce sont des r√©gions au lieu de pays
            regions_generiques = ['North_America', 'Europe', 'Asia_Pacific', 'China']
            if any(region in regions_uniques for region in regions_generiques):
                problemes.append("‚ùå Utilisation de r√©gions g√©ographiques au lieu de pays sp√©cifiques")
                problemes.append("‚ùå 'China' est trait√© comme une r√©gion s√©par√©e de 'Asia_Pacific'")
                problemes.append("‚ùå Manque de pr√©cision g√©ographique pour l'analyse")
            
            # V√©rifier la coh√©rence
            if 'China' in regions_uniques and 'Asia_Pacific' in regions_uniques:
                problemes.append("‚ö†Ô∏è Incoh√©rence: Chine s√©par√©e de l'Asie-Pacifique")
            
            print("\nüö® PROBL√àMES IDENTIFI√âS:")
            for probleme in problemes:
                print(f"  {probleme}")
            
            self.problemes_identifies.extend(problemes)
            return problemes
        else:
            print("‚ùå Colonne 'Region' non trouv√©e")
            return []
    
    def analyser_evolution_temporelle(self):
        """Analyse l'√©volution temporelle des donn√©es existantes"""
        print("\nüìà ANALYSE DE L'√âVOLUTION TEMPORELLE")
        print("=" * 40)
        
        if 'Date' in self.data.columns:
            # Convertir en datetime
            self.data['Date'] = pd.to_datetime(self.data['Date'])
            
            # √âvolution annuelle
            evolution_annuelle = self.data.groupby(self.data['Date'].dt.year).agg({
                'Production_Volume': 'sum',
                'Average_Price': 'mean',
                'EV_Share': 'mean'
            }).round(2)
            
            print("\nüìä √âVOLUTION ANNUELLE DES DONN√âES EXISTANTES:")
            print(evolution_annuelle)
            
            # Cr√©ation du graphique
            fig, axes = plt.subplots(2, 2, figsize=(15, 12))
            
            # Production par ann√©e
            axes[0,0].plot(evolution_annuelle.index, evolution_annuelle['Production_Volume'], 
                           marker='o', linewidth=2, color='blue')
            axes[0,0].set_title('√âvolution de la Production (Donn√©es Existantes)', fontsize=12, fontweight='bold')
            axes[0,0].set_xlabel('Ann√©e')
            axes[0,0].set_ylabel('Volume de Production')
            axes[0,0].grid(True, alpha=0.3)
            
            # Prix par ann√©e
            axes[0,1].plot(evolution_annuelle.index, evolution_annuelle['Average_Price'], 
                           marker='s', linewidth=2, color='green')
            axes[0,1].set_title('√âvolution du Prix Moyen (Donn√©es Existantes)', fontsize=12, fontweight='bold')
            axes[0,1].set_xlabel('Ann√©e')
            axes[0,1].set_ylabel('Prix Moyen ($)')
            axes[0,1].grid(True, alpha=0.3)
            
            # Part VE par ann√©e
            axes[1,0].plot(evolution_annuelle.index, evolution_annuelle['EV_Share'] * 100, 
                           marker='^', linewidth=2, color='red')
            axes[1,0].set_title('√âvolution de la Part VE (Donn√©es Existantes)', fontsize=12, fontweight='bold')
            axes[1,0].set_xlabel('Ann√©e')
            axes[1,0].set_ylabel('Part VE (%)')
            axes[1,0].grid(True, alpha=0.3)
            
            # Distribution par r√©gion
            if 'Region' in self.data.columns:
                production_region = self.data.groupby('Region')['Production_Volume'].sum()
                axes[1,1].pie(production_region.values, labels=production_region.index, autopct='%1.1f%%')
                axes[1,1].set_title('R√©partition par R√©gion (Donn√©es Existantes)', fontsize=12, fontweight='bold')
            
            plt.tight_layout()
            plt.savefig('analyse_donnees_existantes_problemes.png', dpi=300, bbox_inches='tight')
            plt.show()
            
            return evolution_annuelle
        else:
            print("‚ùå Colonne 'Date' non trouv√©e")
            return None
    
    def analyser_fabricants(self):
        """Analyse des fabricants dans les donn√©es existantes"""
        print("\nüè≠ ANALYSE DES FABRICANTS")
        print("=" * 30)
        
        if 'Manufacturer' in self.data.columns:
            fabricants = self.data['Manufacturer'].unique()
            print(f"\nüìã Fabricants identifi√©s ({len(fabricants)}):")
            for i, fabricant in enumerate(fabricants, 1):
                print(f"  {i}. {fabricant}")
            
            # Production par fabricant
            production_fabricant = self.data.groupby('Manufacturer')['Production_Volume'].sum().sort_values(ascending=False)
            
            print("\nüèÜ CLASSEMENT PAR PRODUCTION:")
            for i, (fabricant, production) in enumerate(production_fabricant.items(), 1):
                print(f"  {i:2d}. {fabricant:15s}: {production:>12,.0f} v√©hicules")
            
            return production_fabricant
        else:
            print("‚ùå Colonne 'Manufacturer' non trouv√©e")
            return None
    
    def proposer_corrections(self):
        """Propose des corrections pour les probl√®mes identifi√©s"""
        print("\nüîß PROPOSITIONS DE CORRECTIONS")
        print("=" * 40)
        
        corrections = []
        
        if self.problemes_identifies:
            corrections.append("‚úÖ Remplacer les r√©gions g√©ographiques par des pays sp√©cifiques")
            corrections.append("‚úÖ Utiliser 15 pays majeurs de l'industrie automobile")
            corrections.append("‚úÖ Corriger la coh√©rence g√©ographique (Chine dans Asie)")
            corrections.append("‚úÖ Ajouter des donn√©es r√©alistes pour 2010-2024")
            corrections.append("‚úÖ Inclure l'impact de la COVID-19 (2020-2021)")
            corrections.append("‚úÖ Mod√©liser la croissance des v√©hicules √©lectriques")
            corrections.append("‚úÖ Ajouter des indicateurs √©conomiques r√©alistes")
        
        print("\nüéØ CORRECTIONS PROPOS√âES:")
        for correction in corrections:
            print(f"  {correction}")
        
        return corrections
    
    def generer_rapport_problemes(self):
        """G√©n√®re un rapport des probl√®mes identifi√©s"""
        print("\nüìã RAPPORT DES PROBL√àMES IDENTIFI√âS")
        print("=" * 50)
        
        rapport = {
            'Fichier_analys√©': self.fichier_donnees,
            'Nombre_enregistrements': len(self.data) if self.data is not None else 0,
            'Problemes_identifies': len(self.problemes_identifies),
            'P√©riode_couverte': f"{self.data['Date'].min().year}-{self.data['Date'].max().year}" if self.data is not None and 'Date' in self.data.columns else "Inconnue",
            'R√©gions_utilis√©es': list(self.data['Region'].unique()) if self.data is not None and 'Region' in self.data.columns else [],
            'Fabricants_identifi√©s': list(self.data['Manufacturer'].unique()) if self.data is not None and 'Manufacturer' in self.data.columns else []
        }
        
        print("\nüìä R√âSUM√â:")
        for key, value in rapport.items():
            print(f"  {key}: {value}")
        
        return rapport

def main():
    """Fonction principale d'analyse des probl√®mes"""
    print("üîç ANALYSE DES PROBL√àMES DANS LES DONN√âES EXISTANTES")
    print("=" * 60)
    
    # Chemin vers les donn√©es existantes
    fichier_donnees = "code/comprehensive_automotive_data.csv"
    
    # Initialisation de l'analyseur
    analyseur = AnalyseProblemesDonnees(fichier_donnees)
    
    # Chargement des donn√©es
    if analyseur.charger_donnees():
        # Analyse des probl√®mes
        problemes_regions = analyseur.identifier_problemes_regions()
        evolution = analyseur.analyser_evolution_temporelle()
        fabricants = analyseur.analyser_fabricants()
        corrections = analyseur.proposer_corrections()
        rapport = analyseur.generer_rapport_problemes()
        
        print("\nüéØ CONCLUSION:")
        print("Les donn√©es existantes utilisent des r√©gions g√©ographiques au lieu de pays sp√©cifiques,")
        print("ce qui rend l'analyse moins pr√©cise et logique. Il est recommand√© d'utiliser des pays")
        print("sp√©cifiques pour une analyse plus claire et r√©aliste.")
        
        print("\n‚úÖ SOLUTION PROPOS√âE:")
        print("Utiliser le script 'analyse_donnees_2010_2024_corrigee.py' qui g√©n√®re des donn√©es")
        print("logiques avec 15 pays majeurs et des analyses claires pour la p√©riode 2010-2024.")
    else:
        print("‚ùå Impossible de charger les donn√©es existantes")

if __name__ == "__main__":
    main() 