#!/usr/bin/env python3
"""
=============================================================================
SCRIPT DE LANCEMENT DE L'ANALYSE AUTOMOBILE
=============================================================================

Ce script lance l'analyse automobile compl√®te de mani√®re simple et s√©curis√©e.
Il v√©rifie les d√©pendances, lance l'analyse et ouvre les r√©sultats.

Usage:
    python run_analysis.py

Pr√©requis:
    - Python 3.8+
    - Packages list√©s dans requirements.txt

R√©sultats g√©n√©r√©s:
    - 3 dashboards HTML interactifs
    - 1 rapport Excel complet
    - 1 fichier JSON avec tous les r√©sultats
    - 6 mod√®les ML sauvegard√©s

=============================================================================
"""

import sys
import os
import subprocess
import webbrowser
import time
from datetime import datetime

def check_python_version():
    """
    V√©rification de la version Python.
    
    Returns:
        bool: True si la version est compatible
    """
    print("üêç V√©rification version Python...")
    
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"  ‚úÖ Python {version.major}.{version.minor}.{version.micro} (compatible)")
        return True
    else:
        print(f"  ‚ùå Python {version.major}.{version.minor}.{version.micro} (incompatible)")
        print("  ‚ö†Ô∏è  Python 3.8+ requis")
        return False

def check_dependencies():
    """
    V√©rification et installation automatique des d√©pendances Python.

    Cette fonction v√©rifie la pr√©sence de tous les packages requis pour l'analyse
    automobile et les installe automatiquement s'ils sont manquants.

    Packages v√©rifi√©s:
        - pandas: Manipulation et analyse de donn√©es
        - numpy: Calculs num√©riques et matrices
        - matplotlib: Graphiques de base
        - seaborn: Graphiques statistiques avanc√©s
        - plotly: Visualisations interactives pour dashboards
        - sklearn: Algorithmes de machine learning
        - xgboost: Gradient boosting avanc√©
        - prophet: Pr√©visions de s√©ries temporelles
        - statsmodels: Mod√®les statistiques (ARIMA)
        - joblib: S√©rialisation de mod√®les ML
        - openpyxl: Export vers Excel
        - tqdm: Barres de progression

    Returns:
        bool: True si toutes les d√©pendances sont disponibles, False sinon

    Raises:
        subprocess.CalledProcessError: Si l'installation automatique √©choue
    """
    print("üîß V√©rification des d√©pendances...")
    
    # Liste des packages requis
    required_packages = [
        'pandas',           # Manipulation de donn√©es
        'numpy',            # Calculs num√©riques
        'matplotlib',       # Graphiques de base
        'seaborn',          # Graphiques statistiques
        'plotly',           # Graphiques interactifs
        'sklearn',          # Machine Learning
        'xgboost',          # Gradient Boosting
        'prophet',          # S√©ries temporelles
        'statsmodels',      # Mod√®les statistiques
        'joblib',           # Sauvegarde mod√®les
        'openpyxl',         # Export Excel
        'tqdm'              # Barres de progression
    ]
    
    missing_packages = []
    
    # Test d'import de chaque package
    for package in required_packages:
        try:
            if package == 'sklearn':
                import sklearn
            else:
                __import__(package)
            print(f"  ‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"  ‚ùå {package} - MANQUANT")
    
    # Installation des packages manquants
    if missing_packages:
        print(f"\n‚ö†Ô∏è  {len(missing_packages)} packages manquants")
        print("üîÑ Installation automatique en cours...")
        
        for package in missing_packages:
            try:
                # Nom sp√©cial pour scikit-learn
                install_name = 'scikit-learn' if package == 'sklearn' else package
                
                print(f"  üì¶ Installation de {install_name}...")
                subprocess.check_call([
                    sys.executable, '-m', 'pip', 'install', install_name
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                print(f"  ‚úÖ {install_name} install√©")
                
            except subprocess.CalledProcessError:
                print(f"  ‚ùå √âchec installation {install_name}")
                return False
    
    print("‚úÖ Toutes les d√©pendances sont disponibles")
    return True

def run_automotive_analysis():
    """
    Ex√©cution de l'analyse automobile principale.

    Cette fonction lance le processus complet d'analyse automobile qui comprend:
    1. G√©n√©ration du dataset synth√©tique (12,096 observations)
    2. Entra√Ænement de 6 mod√®les de machine learning
    3. Analyse de 9 sc√©narios diff√©rents
    4. G√©n√©ration de pr√©visions jusqu'en 2030
    5. Cr√©ation de 9 dashboards interactifs
    6. Export des r√©sultats en Excel et JSON

    Fichiers g√©n√©r√©s:
        - 9 dashboards HTML interactifs (42.4 MB total)
        - 6 mod√®les ML sauvegard√©s (.pkl)
        - 1 rapport Excel complet
        - 1 fichier JSON avec tous les r√©sultats
        - 1 dataset CSV complet

    Returns:
        bool: True si l'analyse s'est d√©roul√©e avec succ√®s, False sinon

    Raises:
        Exception: Si une erreur survient pendant l'analyse
    """
    print("üöÄ Lancement de l'analyse automobile...")
    
    try:
        # Import et ex√©cution de l'analyse
        from automotive_analysis_main import AutomotiveAnalysis
        
        # Cr√©ation de l'instance d'analyse
        analyzer = AutomotiveAnalysis()
        
        # Ex√©cution compl√®te
        success = analyzer.run_complete_analysis()
        
        return success
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("‚ö†Ô∏è  Assurez-vous que automotive_analysis_main.py est pr√©sent")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def open_results():
    """
    Ouverture automatique des r√©sultats g√©n√©r√©s dans le navigateur.

    Cette fonction ouvre automatiquement les dashboards prioritaires dans le
    navigateur par d√©faut de l'utilisateur. Elle g√®re l'ouverture s√©quentielle
    avec des d√©lais pour √©viter la surcharge du navigateur.

    Dashboards ouverts automatiquement (4):
        1. Dashboard Ex√©cutif Direction - Vue strat√©gique pour la direction
        2. Dashboard Principal - Comparaison des 9 sc√©narios
        3. Dashboard Intelligence Concurrentielle - Analyse concurrentielle
        4. Dashboard Risques & Opportunit√©s - Analyse des risques

    Dashboards suppl√©mentaires disponibles (5):
        - Dashboard Analyse √âconomique Strat√©gique
        - Dashboard Analyse G√©ographique Avanc√©e
        - Dashboard Mod√®les ML
        - Dashboard Fabricants
        - Dashboard Transition √âlectrique

    Note:
        Les dashboards suppl√©mentaires ne sont pas ouverts automatiquement
        pour √©viter de surcharger le navigateur, mais sont list√©s pour
        information.
    """
    print("üåê Ouverture des r√©sultats...")
    
    # Liste des fichiers √† ouvrir (dashboards prioritaires)
    files_to_open = [
        {
            'file': 'dashboard_executif_direction.html',
            'name': 'üìä Dashboard Ex√©cutif (PRIORIT√â)',
            'description': 'Tableau de bord direction - Vue strat√©gique'
        },
        {
            'file': 'dashboard_principal_automobile.html',
            'name': 'üöó Dashboard Principal',
            'description': 'Vue d\'ensemble avec comparaison des sc√©narios'
        },
        {
            'file': 'dashboard_intelligence_concurrentielle.html',
            'name': 'üèÜ Dashboard Intelligence Concurrentielle',
            'description': 'Analyse concurrentielle et positionnement'
        },
        {
            'file': 'dashboard_risques_opportunites.html',
            'name': '‚ö†Ô∏è Dashboard Risques & Opportunit√©s',
            'description': 'Analyse des risques et opportunit√©s strat√©giques'
        }
    ]

    # Dashboards suppl√©mentaires (optionnels)
    additional_dashboards = [
        {
            'file': 'dashboard_fabricants_automobile.html',
            'name': 'üè≠ Dashboard Fabricants',
            'description': 'Analyse d√©taill√©e par constructeur'
        },
        {
            'file': 'dashboard_transition_electrique.html',
            'name': '‚ö° Dashboard Transition √âlectrique',
            'description': 'Focus sur les v√©hicules √©lectriques'
        },
        {
            'file': 'dashboard_modeles_ml.html',
            'name': 'ü§ñ Dashboard Mod√®les ML',
            'description': 'Performance et comparaison des mod√®les ML'
        },
        {
            'file': 'dashboard_analyse_economique_strategique.html',
            'name': 'üí∞ Dashboard Analyse √âconomique',
            'description': 'Impact macro-√©conomique et corr√©lations'
        },
        {
            'file': 'dashboard_analyse_geographique_avancee.html',
            'name': 'üåç Dashboard Analyse G√©ographique',
            'description': 'Dynamiques g√©ographiques et r√©gionales'
        }
    ]
    
    opened_count = 0

    # Ouverture des dashboards prioritaires
    print("\nüéØ DASHBOARDS PRIORITAIRES:")
    for file_info in files_to_open:
        if os.path.exists(file_info['file']):
            print(f"\n  üåê {file_info['name']}")
            print(f"     {file_info['description']}")

            try:
                # Ouverture dans le navigateur par d√©faut
                webbrowser.open(f'file://{os.path.abspath(file_info["file"])}')
                opened_count += 1
                time.sleep(2)  # D√©lai entre les ouvertures
                print(f"     ‚úÖ Ouvert avec succ√®s")

            except Exception as e:
                print(f"     ‚ùå Erreur: {e}")
        else:
            print(f"\n  ‚ùå {file_info['name']} - Fichier non trouv√©")

    # Information sur les dashboards suppl√©mentaires
    print(f"\nüìä DASHBOARDS SUPPL√âMENTAIRES DISPONIBLES:")
    additional_count = 0
    for file_info in additional_dashboards:
        if os.path.exists(file_info['file']):
            additional_count += 1
            print(f"  ‚úÖ {file_info['name']} - {file_info['description']}")
        else:
            print(f"  ‚ùå {file_info['name']} - Non disponible")

    if opened_count > 0:
        print(f"\nüéâ {opened_count} dashboards prioritaires ouverts!")
        print(f"üìä {additional_count} dashboards suppl√©mentaires disponibles")
        print("\nüìã Instructions d'utilisation:")
        print("  ‚Ä¢ Utilisez les contr√¥les Plotly pour zoomer et naviguer")
        print("  ‚Ä¢ Survolez les graphiques pour voir les d√©tails")
        print("  ‚Ä¢ Cliquez sur la l√©gende pour activer/d√©sactiver des s√©ries")
        print("  ‚Ä¢ Utilisez les boutons de la barre d'outils pour exporter")

        if additional_count > 0:
            print(f"\nüí° Pour ouvrir les {additional_count} dashboards suppl√©mentaires:")
            print("   Ouvrez manuellement les fichiers HTML dans votre navigateur")
    
    # Affichage des autres fichiers g√©n√©r√©s
    print("\nüìÅ Autres fichiers g√©n√©r√©s:")
    other_files = [
        'automotive_analysis_report_clean.xlsx',
        'automotive_analysis_results_clean.json'
    ]
    
    for file in other_files:
        if os.path.exists(file):
            size = os.path.getsize(file) / 1024
            print(f"  ‚úÖ {file} ({size:.1f} KB)")

def main():
    """
    Fonction principale du script de lancement de l'analyse automobile.

    Cette fonction orchestre l'ensemble du processus d'analyse automobile:
    1. V√©rification de la compatibilit√© Python (3.8+)
    2. V√©rification et installation des d√©pendances
    3. Lancement de l'analyse compl√®te
    4. Ouverture automatique des r√©sultats
    5. Affichage du r√©sum√© final

    Processus d'analyse:
        - G√©n√©ration dataset synth√©tique (12,096 observations)
        - Entra√Ænement 6 mod√®les ML (XGBoost, Prophet, LR, ARIMA)
        - Analyse 9 sc√©narios (4 politiques US + 5 autres)
        - Cr√©ation 9 dashboards interactifs
        - Export r√©sultats (Excel, JSON, CSV)
        - Sauvegarde mod√®les ML

    Returns:
        bool: True si l'analyse s'est d√©roul√©e avec succ√®s, False sinon

    Note:
        En cas d'√©chec, des messages d'erreur d√©taill√©s sont affich√©s
        pour aider au diagnostic du probl√®me.
    """
    
    print("üöó" + "="*60 + "üöó")
    print("üöÄ LANCEMENT ANALYSE AUTOMOBILE COMPL√àTE üöÄ")
    print("üöó" + "="*60 + "üöó")
    print(f"üìÖ D√©marrage: {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}")
    
    # √âtape 1: V√©rification Python
    if not check_python_version():
        print("\n‚ùå Version Python incompatible")
        return False
    
    # √âtape 2: V√©rification d√©pendances
    if not check_dependencies():
        print("\n‚ùå Probl√®me avec les d√©pendances")
        return False
    
    # √âtape 3: Ex√©cution de l'analyse
    print(f"\nüéØ OBJECTIFS:")
    print("  ‚úÖ Analyse production automobile 2010-2023")
    print("  ‚úÖ 4 mod√®les ML (ARIMA, LR, XGBoost, Prophet)")
    print("  ‚úÖ 9 sc√©narios politiques et √©conomiques")
    print("  ‚úÖ Pr√©visions jusqu'en 2030")
    print("  ‚úÖ 3 dashboards interactifs")
    print("  ‚úÖ Recommandations strat√©giques")
    
    success = run_automotive_analysis()
    
    if not success:
        print("\n‚ùå √âchec de l'analyse")
        return False
    
    # √âtape 4: Ouverture des r√©sultats
    open_results()
    
    # R√©sum√© final
    print("\n" + "üéâ"*30)
    print("üèÜ ANALYSE AUTOMOBILE TERMIN√âE AVEC SUCC√àS! üèÜ")
    print("üéâ"*30)
    
    print("\nüìä LIVRABLES G√âN√âR√âS:")
    print("  ‚úÖ 3 Dashboards HTML interactifs")
    print("  ‚úÖ 1 Rapport Excel complet")
    print("  ‚úÖ 1 Fichier JSON avec tous les r√©sultats")
    print("  ‚úÖ 6 Mod√®les ML sauvegard√©s")
    print("  ‚úÖ Recommandations strat√©giques d√©taill√©es")
    
    print("\nüéØ UTILISATION:")
    print("  1. üåê Explorez les dashboards HTML ouverts")
    print("  2. üìä Consultez le rapport Excel pour les d√©tails")
    print("  3. ü§ñ Utilisez les mod√®les .pkl pour nouvelles pr√©dictions")
    print("  4. üìã Lisez les recommandations dans le JSON")
    
    print(f"\n‚è∞ Termin√©: {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}")
    
    return True

if __name__ == "__main__":
    """
    Point d'entr√©e du script.
    
    Lance l'analyse compl√®te et affiche le r√©sultat.
    """
    success = main()
    
    if success:
        print("\nüöó Mission accomplie! Analyse automobile r√©ussie! üöó")
        sys.exit(0)
    else:
        print("\nüí• √âchec du lancement de l'analyse üí•")
        sys.exit(1)
